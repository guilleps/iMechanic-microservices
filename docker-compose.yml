version: '3.8'
name: microservice-app

services:
  # Frontend Service
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"
    depends_on:
      - gateway
    networks:
      - mechanic-net

  # Backend Services
  discovery:
    build:
      context: ./microservices/discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery:8761/eureka
    ports:
      - "8761:8761"
    networks:
      - mechanic-net

  gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery:8761/eureka
      URL_FRONT: http://frontend
    networks:
      - mechanic-net

  main:
    build:
      context: ./microservices/principal-service
      dockerfile: Dockerfile
    container_name: principal-service
    restart: on-failure
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/principal_db
      URL_FRONT: http://frontend
    depends_on:
      - db
      - gateway
      - discovery
    networks:
      - mechanic-net

  order:
    build:
      context: ./microservices/order-service
      dockerfile: Dockerfile
    container_name: order-service
    restart: on-failure
    depends_on:
      - monguito
      - gateway
      - discovery
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery:8761/eureka
      MONGODB_URI: mongodb://root:${MONGO_INITDB_ROOT_PASSWORD}@monguito:27017/work_order_db?authSource=admin
    networks:
      - mechanic-net
      - monguito-net

  db:
    build:
      context: ./microservices/databases/db-main
      dockerfile: Dockerfile
    restart: always
    container_name: mysql-container
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpass}
      MYSQL_DATABASE: principal_db
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mechanic-net

  monguito:
    build:
      context: ./microservices/databases/db-order
      dockerfile: Dockerfile
    restart: always
    container_name: mongodb-container
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-mongopass}
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - monguito-net

volumes:
  mysql_data:
  mongo_data:

networks:
  mechanic-net:
    driver: bridge
  monguito-net:
    driver: bridge